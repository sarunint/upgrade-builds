{"version":3,"file":"upgrade_component.js","sourceRoot":"","sources":["../../../../../../packages/upgrade/static/src/static/upgrade_component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DoCheck, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, ÉµlooseIdentical as looseIdentical} from '@angular/core';\nimport * as angular from '../common/angular1';\nimport {$SCOPE} from '../common/constants';\nimport {IBindingDestination, IControllerInstance, UpgradeHelper} from '../common/upgrade_helper';\nimport {isFunction} from '../common/util';\n\nconst NOT_SUPPORTED: any = 'NOT_SUPPORTED';\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\n\nclass Bindings {\n  twoWayBoundProperties: string[] = [];\n  twoWayBoundLastValues: any[] = [];\n\n  expressionBoundProperties: string[] = [];\n\n  propertyToOutputMap: {[propName: string]: string} = {};\n}\n\n/**\n * @description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation.*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * @publicApi\n */\nexport class UpgradeComponent implements OnInit, OnChanges, DoCheck, OnDestroy {\n  private helper: UpgradeHelper;\n\n  private $injector: angular.IInjectorService;\n\n  private element: Element;\n  private $element: angular.IAugmentedJQuery;\n  private $componentScope: angular.IScope;\n\n  private directive: angular.IDirective;\n  private bindings: Bindings;\n\n  // TODO(issue/24571): remove '!'.\n  private controllerInstance !: IControllerInstance;\n  // TODO(issue/24571): remove '!'.\n  private bindingDestination !: IBindingDestination;\n\n  // We will be instantiating the controller in the `ngOnInit` hook, when the\n  // first `ngOnChanges` will have been already triggered. We store the\n  // `SimpleChanges` and \"play them back\" later.\n  // TODO(issue/24571): remove '!'.\n  private pendingChanges !: SimpleChanges | null;\n\n  // TODO(issue/24571): remove '!'.\n  private unregisterDoCheckWatcher !: Function;\n\n  /**\n   * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n   * Instead you should derive a new class from this one and call the super constructor\n   * from the base class.\n   *\n   * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n   *\n   * * The `name` parameter should be the name of the AngularJS directive.\n   * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n   *   injection into the base class constructor.\n   */\n  constructor(private name: string, private elementRef: ElementRef, private injector: Injector) {\n    this.helper = new UpgradeHelper(injector, name, elementRef);\n\n    this.$injector = this.helper.$injector;\n\n    this.element = this.helper.element;\n    this.$element = this.helper.$element;\n\n    this.directive = this.helper.directive;\n    this.bindings = this.initializeBindings(this.directive);\n\n    // We ask for the AngularJS scope from the Angular injector, since\n    // we will put the new component scope onto the new injector for each component\n    const $parentScope = injector.get($SCOPE);\n    // QUESTION 1: Should we create an isolated scope if the scope is only true?\n    // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n    this.$componentScope = $parentScope.$new(!!this.directive.scope);\n\n    this.initializeOutputs();\n  }\n\n  ngOnInit() {\n    // Collect contents, insert and compile template\n    const attachChildNodes: angular.ILinkFn|undefined = this.helper.prepareTransclusion();\n    const linkFn = this.helper.compileTemplate();\n\n    // Instantiate controller\n    const controllerType = this.directive.controller;\n    const bindToController = this.directive.bindToController;\n    if (controllerType) {\n      this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n    } else if (bindToController) {\n      throw new Error(\n          `Upgraded directive '${this.directive.name}' specifies 'bindToController' but no controller.`);\n    }\n\n    // Set up outputs\n    this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n    this.bindOutputs();\n\n    // Require other controllers\n    const requiredControllers =\n        this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n\n    // Hook: $onChanges\n    if (this.pendingChanges) {\n      this.forwardChanges(this.pendingChanges);\n      this.pendingChanges = null;\n    }\n\n    // Hook: $onInit\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    // Hook: $doCheck\n    if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n      const callDoCheck = () => this.controllerInstance.$doCheck !();\n\n      this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n      callDoCheck();\n    }\n\n    // Linking\n    const link = this.directive.link;\n    const preLink = (typeof link == 'object') && (link as angular.IDirectivePrePost).pre;\n    const postLink = (typeof link == 'object') ? (link as angular.IDirectivePrePost).post : link;\n    const attrs: angular.IAttributes = NOT_SUPPORTED;\n    const transcludeFn: angular.ITranscludeFunction = NOT_SUPPORTED;\n    if (preLink) {\n      preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    linkFn(this.$componentScope, null !, {parentBoundTranscludeFn: attachChildNodes});\n\n    if (postLink) {\n      postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    // Hook: $postLink\n    if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.bindingDestination) {\n      this.pendingChanges = changes;\n    } else {\n      this.forwardChanges(changes);\n    }\n  }\n\n  ngDoCheck() {\n    const twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n    const twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n    const propertyToOutputMap = this.bindings.propertyToOutputMap;\n\n    twoWayBoundProperties.forEach((propName, idx) => {\n      const newValue = this.bindingDestination[propName];\n      const oldValue = twoWayBoundLastValues[idx];\n\n      if (!looseIdentical(newValue, oldValue)) {\n        const outputName = propertyToOutputMap[propName];\n        const eventEmitter: EventEmitter<any> = (this as any)[outputName];\n\n        eventEmitter.emit(newValue);\n        twoWayBoundLastValues[idx] = newValue;\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (isFunction(this.unregisterDoCheckWatcher)) {\n      this.unregisterDoCheckWatcher();\n    }\n    this.helper.onDestroy(this.$componentScope, this.controllerInstance);\n  }\n\n  private initializeBindings(directive: angular.IDirective) {\n    const btcIsObject = typeof directive.bindToController === 'object';\n    if (btcIsObject && Object.keys(directive.scope !).length) {\n      throw new Error(\n          `Binding definitions on scope and controller at the same time is not supported.`);\n    }\n\n    const context = (btcIsObject) ? directive.bindToController : directive.scope;\n    const bindings = new Bindings();\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach(propName => {\n        const definition = context[propName];\n        const bindingType = definition.charAt(0);\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            // We don't need to do anything special. They will be defined as inputs on the\n            // upgraded component facade and the change propagation will be handled by\n            // `ngOnChanges()`.\n            break;\n          case '=':\n            bindings.twoWayBoundProperties.push(propName);\n            bindings.twoWayBoundLastValues.push(INITIAL_VALUE);\n            bindings.propertyToOutputMap[propName] = propName + 'Change';\n            break;\n          case '&':\n            bindings.expressionBoundProperties.push(propName);\n            bindings.propertyToOutputMap[propName] = propName;\n            break;\n          default:\n            let json = JSON.stringify(context);\n            throw new Error(\n                `Unexpected mapping '${bindingType}' in '${json}' in '${this.name}' directive.`);\n        }\n      });\n    }\n\n    return bindings;\n  }\n\n  private initializeOutputs() {\n    // Initialize the outputs for `=` and `&` bindings\n    this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n        .forEach(propName => {\n          const outputName = this.bindings.propertyToOutputMap[propName];\n          (this as any)[outputName] = new EventEmitter();\n        });\n  }\n\n  private bindOutputs() {\n    // Bind `&` bindings to the corresponding outputs\n    this.bindings.expressionBoundProperties.forEach(propName => {\n      const outputName = this.bindings.propertyToOutputMap[propName];\n      const emitter = (this as any)[outputName];\n\n      this.bindingDestination[propName] = (value: any) => emitter.emit(value);\n    });\n  }\n\n  private forwardChanges(changes: SimpleChanges) {\n    // Forward input changes to `bindingDestination`\n    Object.keys(changes).forEach(\n        propName => this.bindingDestination[propName] = changes[propName].currentValue);\n\n    if (isFunction(this.bindingDestination.$onChanges)) {\n      this.bindingDestination.$onChanges(changes);\n    }\n  }\n}\n"]}